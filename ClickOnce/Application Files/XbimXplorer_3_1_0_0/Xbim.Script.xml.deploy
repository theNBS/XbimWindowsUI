<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xbim.Script</name>
    </assembly>
    <members>
        <member name="M:Xbim.Script.ScriptGroupExtension.SetScript(Xbim.Ifc2x3.Kernel.IfcGroup,System.String)">
            <summary>
            Sets the script to the predefined pSet. This can be used for a late evaluation of the group members
            </summary>
            <param name="script">Script to be executed. Set this to NULL to reset the script. 
            Property will still be defined but will be empty. You can use "ExecuteScript" 
            to get the entities which belong to this group. These entities are not defined by 
            IfcRelAssignToGroup relationship.</param>
        </member>
        <member name="M:Xbim.Script.ScriptGroupExtension.GetScript(Xbim.Ifc2x3.Kernel.IfcGroup)">
            <summary>
            Gets the script from predefined pSet and property.
            </summary>
            <returns>Script saved in the property</returns>
        </member>
        <member name="M:Xbim.Script.ScriptGroupExtension.HasScript(Xbim.Ifc2x3.Kernel.IfcGroup)">
            <summary>
            Indicates whether the script is defined for this group
            </summary>
            <returns>True if the script is defined, false otherwise.</returns>
        </member>
        <member name="M:Xbim.Script.ScriptGroupExtension.ExecuteScript(Xbim.Ifc2x3.Kernel.IfcGroup)">
            <summary>
            This function will execute the script if there is any defined. 
            If no script is defined this will return empty set.
            </summary>
            <returns>Set of the results or empty set if there are no results or no script defined.</returns>
        </member>
        <member name="M:Xbim.Script.ScriptGroupExtension.GetLastScriptErrors">
            <summary>
            Gets last errors from execution of the script. 
            You should always check this ater you try to get elements using 'ExecuteScript()'
            </summary>
            <returns>List of last errors with descriptive informations</returns>
        </member>
        <member name="T:QUT.Xbim.Gppg.ShiftReduceParser`2">
            <summary>
            Abstract class for GPPG shift-reduce parsers.
            Parsers generated by GPPG derive from this base
            class, overriding the abstract Initialize() and
            DoAction() methods.
            </summary>
            <typeparam name="TValue">Semantic value type</typeparam>
            <typeparam name="TSpan">Location type</typeparam>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.#ctor(QUT.Xbim.Gppg.AbstractScanner{`0,`1})">
            <summary>
            Constructor for base class
            </summary>
            <param name="scanner">Scanner instance for this parser</param>
        </member>
        <member name="F:QUT.Xbim.Gppg.ShiftReduceParser`2.CurrentSemanticValue">
            <summary>
            The current value of the "$$" symbolic variable in the parser
            </summary>
        </member>
        <member name="F:QUT.Xbim.Gppg.ShiftReduceParser`2.CurrentLocationSpan">
            <summary>
            The current value of the "@$" symbolic variable in the parser
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.InitRules(QUT.Xbim.Gppg.Rule[])">
            <summary>
            Initialization method to allow derived classes
            to insert the rule list into this base class.
            </summary>
            <param name="rules">The array of Rule objects</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.InitStates(QUT.Xbim.Gppg.State[])">
            <summary>
            Initialization method to allow derived classes to
            insert the states table into this base class.
            </summary>
            <param name="states">The pre-initialized states table</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.InitStateTable(System.Int32)">
            <summary>
            OBSOLETE FOR VERSION 1.4.0
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.InitSpecialTokens(System.Int32,System.Int32)">
            <summary>
            Initialization method to allow derived classes
            to insert the special value for the error and EOF tokens.
            </summary>
            <param name="err">The error state ordinal</param>
            <param name="end">The EOF stat ordinal</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.InitNonTerminals(System.String[])">
            <summary>
            Initialization method to allow derived classes to
            insert the non-terminal symbol names into this base class.
            </summary>
            <param name="names">Non-terminal symbol names</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.YYAccept">
            <summary>
            Force parser to terminate, returning "true"
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.YYAbort">
            <summary>
            Force parser to terminate, returning "false"
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.YYError">
            <summary>
            Force parser to terminate, returning
            "false" if error recovery fails.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.Initialize">
            <summary>
            Abstract base method. ShiftReduceParser calls this
            to initialize the base class data structures.  Concrete
            parser classes must override this method.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.Parse">
            <summary>
            Main entry point of the Shift-Reduce Parser.
            </summary>
            <returns>True if parse succeeds, else false for
            unrecoverable errors</returns>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.DoAction(System.Int32)">
            <summary>
            Execute the selected action from array.
            Must be overriden in derived classes.
            </summary>
            <param name="actionNumber">Index of the action to perform</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.yyclearin">
            <summary>
            Traditional YACC method.  Discards the next input token.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.yyerrok">
            <summary>
            Tradional YACC method. Clear the "recovering" flag.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.AddState(System.Int32,QUT.Xbim.Gppg.State)">
            <summary>
            OBSOLETE FOR VERSION 1.4.0
            Method used by derived types to insert new
            state instances in the "states" array.
            </summary>
            <param name="stateNumber">index of the state</param>
            <param name="state">data for the state</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.TerminalToString(System.Int32)">
            <summary>
            Abstract state class naming terminal symbols.
            This is overridden by derived classes with the
            name (or alias) to be used in error messages.
            </summary>
            <param name="terminal">The terminal ordinal</param>
            <returns></returns>
        </member>
        <member name="M:QUT.Xbim.Gppg.ShiftReduceParser`2.CharToString(System.Char)">
            <summary>
            Return text representation of argument character
            </summary>
            <param name="input">The character to convert</param>
            <returns>String representation of the character</returns>
        </member>
        <member name="P:QUT.Xbim.Gppg.ShiftReduceParser`2.Scanner">
            <summary>
            The abstract scanner for this parser.
            </summary>
        </member>
        <member name="P:QUT.Xbim.Gppg.ShiftReduceParser`2.ValueStack">
            <summary>
            The stack of semantic value (YYSTYPE) values.
            </summary>
        </member>
        <member name="P:QUT.Xbim.Gppg.ShiftReduceParser`2.LocationStack">
            <summary>
            The stack of location value (YYLTYPE) varlues.
            </summary>
        </member>
        <member name="P:QUT.Xbim.Gppg.ShiftReduceParser`2.YYRecovering">
            <summary>
            Check if parser in error recovery state.
            </summary>
        </member>
        <member name="T:QUT.Xbim.Gppg.IMerge`1">
            <summary>
            Classes implementing this interface must supply a
            method that merges two location objects to return
            a new object of the same type.
            GPPG-generated parsers have the default location
            action equivalent to "@$ = @1.Merge(@N);" where N
            is the right-hand-side length of the production.
            </summary>
            <typeparam name="TSpan">The Location type</typeparam>
        </member>
        <member name="M:QUT.Xbim.Gppg.IMerge`1.Merge(`0)">
            <summary>
            Interface method that creates a location object from
            the current and last object.  Typically used to create
            a location object extending from the start of the @1
            object to the end of the @N object.
            </summary>
            <param name="last">The lexically last object to merge</param>
            <returns>The merged location object</returns>
        </member>
        <member name="T:QUT.Xbim.Gppg.LexLocation">
            <summary>
            This is the default class that carries location
            information from the scanner to the parser.
            If you don't declare "%YYLTYPE Foo" the parser
            will expect to deal with this type.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.LexLocation.#ctor">
            <summary>
            Default no-arg constructor.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.LexLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for text-span with given start and end.
            </summary>
            <param name="sl">start line</param>
            <param name="sc">start column</param>
            <param name="el">end line </param>
            <param name="ec">end column</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.LexLocation.Merge(QUT.Xbim.Gppg.LexLocation)">
            <summary>
            Create a text location which spans from the 
            start of "this" to the end of the argument "last"
            </summary>
            <param name="last">The last location in the result span</param>
            <returns>The merged span</returns>
        </member>
        <member name="P:QUT.Xbim.Gppg.LexLocation.StartLine">
            <summary>
            The line at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Xbim.Gppg.LexLocation.StartColumn">
            <summary>
            The column at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Xbim.Gppg.LexLocation.EndLine">
            <summary>
            The line on which the text span ends.
            </summary>
        </member>
        <member name="P:QUT.Xbim.Gppg.LexLocation.EndColumn">
            <summary>
            The column of the first character
            beyond the end of the text span.
            </summary>
        </member>
        <member name="T:QUT.Xbim.Gppg.AbstractScanner`2">
            <summary>
            Abstract scanner class that GPPG expects its scanners to 
            extend.
            </summary>
            <typeparam name="TValue">Semantic value type YYSTYPE</typeparam>
            <typeparam name="TSpan">Source location type YYLTYPE</typeparam>
        </member>
        <member name="F:QUT.Xbim.Gppg.AbstractScanner`2.yylval">
            <summary>
            Lexical value optionally set by the scanner. The value
            is of the %YYSTYPE type declared in the parser spec.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.AbstractScanner`2.yylex">
            <summary>
            Main call point for LEX-like scanners.  Returns an int
            corresponding to the token recognized by the scanner.
            </summary>
            <returns>An int corresponding to the token</returns>
        </member>
        <member name="M:QUT.Xbim.Gppg.AbstractScanner`2.yyerror(System.String,System.Object[])">
            <summary>
            Traditional error reporting provided by LEX-like scanners
            to their YACC-like clients.
            </summary>
            <param name="format">Message format string</param>
            <param name="args">Optional array of args</param>
        </member>
        <member name="P:QUT.Xbim.Gppg.AbstractScanner`2.yylloc">
            <summary>
            Current scanner location property. The value is of the
            type declared by %YYLTYPE in the parser specification.
            </summary>
        </member>
        <member name="T:QUT.Xbim.Gppg.State">
            <summary>
            Encapsulated state for the parser.
            Opaque to users, visible to the tool-generated code.
            </summary>
        </member>
        <member name="F:QUT.Xbim.Gppg.State.number">
            <summary>
            The index of this state in the states array.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.State.#ctor(System.Int32[],System.Int32[])">
            <summary>
            State transition data for this state. Pairs of elements of the 
            goto array associate symbol ordinals with next state indices.
            The actions array is passed to another constructor. 
            </summary>
            <param name="actions">The action list</param>c
            <param name="goToList">Next state data</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.State.#ctor(System.Int32[])">
            <summary>
            Action data for this state. Pairs of elements of the 
            action array associate action ordinals with each of
            those symbols that have actions in the current state.
            </summary>
            <param name="actions">The action array</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.State.#ctor(System.Int32)">
            <summary>
            Set the default action for this state.
            </summary>
            <param name="defaultAction">Ordinal of the default action</param>
        </member>
        <member name="M:QUT.Xbim.Gppg.State.#ctor(System.Int32,System.Int32[])">
            <summary>
            Set the default action and the state transition table.
            </summary>
            <param name="defaultAction">The default action</param>
            <param name="goToList">Transitions from this state</param>
        </member>
        <member name="T:QUT.Xbim.Gppg.Rule">
            <summary>
            Rule representation at runtime.
            </summary>
        </member>
        <member name="M:QUT.Xbim.Gppg.Rule.#ctor(System.Int32,System.Int32[])">
            <summary>
            Rule constructor.  This holds the ordinal of
            the left hand side symbol, and the list of
            right hand side symbols, in lexical order.
            </summary>
            <param name="left">The LHS non-terminal</param>
            <param name="right">The RHS symbols, in lexical order</param>
        </member>
        <member name="T:QUT.Xbim.Gppg.PushdownPrefixState`1">
            <summary>
            Stack utility for the shift-reduce parser.
            GPPG parsers have three instances:
            (1) The parser state stack, T = QUT.Gppg.State,
            (2) The semantic value stack, T = TValue,
            (3) The location stack, T = TSpan.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:QUT.Xbim.Gppg.PushdownPrefixState`1.Item(System.Int32)">
            <summary>
            Indexer for values of the stack below the top.
            </summary>
            <param name="index">index of the element, starting from the bottom</param>
            <returns>the selected element</returns>
        </member>
        <member name="P:QUT.Xbim.Gppg.PushdownPrefixState`1.Depth">
            <summary>
            The current depth of the stack.
            </summary>
        </member>
        <member name="M:Xbim.Script.Parser.GetMaterialNames(Xbim.XbimExtensions.SelectTypes.IfcMaterialSelect)">
            <summary>
            Get names of all materials involved
            </summary>
            <param name="materialSelect">Possible types of material</param>
            <returns>List of names</returns>
        </member>
        <member name="M:Xbim.Script.Parser.WriteLine(System.String)">
            <summary>
            Unified function so that the same output can be send 
            to the Console and to the optional text writer as well.
            </summary>
            <param name="message">Message for the output</param>
        </member>
        <member name="M:Xbim.Script.Parser.Write(System.String)">
            <summary>
            Unified function so that the same output can be send 
            to the Console and to the optional text writer as well.
            </summary>
            <param name="message">Message for the output</param>
        </member>
        <member name="E:Xbim.Script.Parser.OnModelChanged">
            <summary>
            This event is fired when parser open or 
            close model from script action
            </summary>
        </member>
        <member name="E:Xbim.Script.Parser.OnFileReportCreated">
            <summary>
            This event is fired when file with report is created 
            (like XLS or CSV as an export of properties and arguments 
            or result of rule checking)
            </summary>
        </member>
        <member name="M:Xbim.Script.RuleCheckResultsManager.SaveToCSV(System.String)">
            <summary>
            Saves report of the rules check as a CSV file
            </summary>
            <param name="path">Path of the file</param>
            <returns>Final path with extension</returns>
        </member>
        <member name="M:Xbim.Script.RuleCheckResultsManager.SaveToXLS(System.String)">
            <summary>
            Saves report of the rules check as a XLS file
            </summary>
            <param name="path">Path of the file</param>
            <returns>Final path with extension</returns>
        </member>
        <member name="T:Xbim.Script.Scanner">
            <summary>
            Summary Canonical example of GPLEX automaton
            </summary>
        </member>
        <member name="M:Xbim.Script.Scanner.ProcessString">
            <summary>
            String processing funtion used during the scanning.
            </summary>
            <returns>Token PRODUCT, PRODUCT_TYPE or STRING</returns>
        </member>
        <member name="M:Xbim.Script.Scanner.SetValue(Xbim.Script.Tokens)">
            <summary>
            function used by scanner to set values for value type tokens
            </summary>
            <param name="type">Value type. If no value type is specified 'STRING' is used by default</param>
            <returns>Token set by the function</returns>
        </member>
        <member name="F:Xbim.Script.Scanner.ProductDictionary">
            <summary>
            Dictionary of possible names and types
            </summary>
        </member>
        <member name="F:Xbim.Script.Scanner.TypeProductDictionary">
            <summary>
            Dictionary of possible type product names and types
            </summary>
        </member>
        <member name="M:Xbim.Script.Scanner.IsProduct(System.String)">
            <summary>
            Find if the name is one of the variants of some product name. Case insensitive.
            </summary>
            <param name="productName">Name of the product</param>
            <returns>True it the string can be name of some product, false otherwise</returns>
        </member>
        <member name="M:Xbim.Script.Scanner.IsTypeProduct(System.String)">
            <summary>
            Find if the name is one of the variants of some type product name. Case insensitive.
            </summary>
            <param name="productName">Name of the type product</param>
            <returns>True it the string can be name of some type product, false otherwise</returns>
        </member>
        <member name="M:Xbim.Script.Scanner.GetProductType(System.String)">
            <summary>
            Gets product type if the name is one of variants (case insensitive)
            </summary>
            <param name="productName">Name of the product (IfcWall, wall, IfcStairFlight, stair flight, ...)</param>
            <returns>Type if found, null otherwise</returns>
        </member>
        <member name="M:Xbim.Script.Scanner.GetTypeProductType(System.String)">
            <summary>
            Gets type product type if the name is one of variants (case insensitive)
            </summary>
            <param name="typeProductName">Name of the type product (IfcWallType, wall_type, ...)</param>
            <returns>Type if found, null otherwise</returns>
        </member>
        <member name="M:Xbim.Script.Scanner.GetNames(System.Type)">
            <summary>
            Creates dictionary where keys are variants of product names and values are the types
            </summary>
            <returns>Dictionary of variants of the product names</returns>
        </member>
        <member name="M:Xbim.Script.Scanner.SplitCamelCase(System.String)">
            <summary>
            Splits the string from camel case to underscore separated strings
            </summary>
            <param name="input">Input string</param>
            <returns>Splitted camel-case string</returns>
        </member>
        <member name="F:Xbim.Script.Scanner.Errors">
            <summary>
            List of errors
            </summary>
        </member>
        <member name="F:Xbim.Script.Scanner.ErrorLocations">
            <summary>
            List of error locations
            </summary>
        </member>
        <member name="M:Xbim.Script.Scanner.yyerror(System.String,System.Object[])">
            <summary>
            Overriden yyerror function for error reporting
            </summary>
            <param name="format">Formated error message</param>
            <param name="args">Error arguments</param>
        </member>
        <member name="M:Xbim.Script.Scanner.MkBuffCtx">
            <summary>
            This method creates a buffer context record from
            the current buffer object, together with some
            scanner state values. 
            </summary>
        </member>
        <member name="M:Xbim.Script.Scanner.RestoreBuffCtx(Xbim.Script.Scanner.BufferContext)">
            <summary>
            This method restores the buffer value and allied
            scanner state from the given context record value.
            </summary>
        </member>
        <member name="M:Xbim.Script.Scanner.SetSource(System.String,System.Int32)">
            <summary>
            Create and initialize a StringBuff buffer object for this scanner
            </summary>
            <param name="source">the input string</param>
            <param name="offset">starting offset in the string</param>
        </member>
        <member name="M:Xbim.Script.Scanner.SetSource(System.Collections.Generic.IList{System.String})">
            <summary>
            Create and initialize a LineBuff buffer object for this scanner
            </summary>
            <param name="source">the list of input strings</param>
        </member>
        <member name="M:Xbim.Script.Scanner.SetSource(System.IO.Stream)">
            <summary>
            Create and initialize a StreamBuff buffer object for this scanner.
            StreamBuff is buffer for 8-bit byte files.
            </summary>
            <param name="source">the input byte stream</param>
        </member>
        <member name="M:Xbim.Script.Scanner.yyless(System.Int32)">
            <summary>
            Discards all but the first "n" codepoints in the recognized pattern.
            Resets the buffer position so that only n codepoints have been consumed;
            yytext is also re-evaluated. 
            </summary>
            <param name="n">The number of codepoints to consume</param>
        </member>
        <member name="M:Xbim.Script.Scanner._yytrunc(System.Int32)">
            <summary>
            Removes the last "n" code points from the pattern.
            </summary>
            <param name="n">The number to remove</param>
        </member>
        <member name="P:Xbim.Script.Scanner.Buffer">
            <summary>
            The input buffer for this scanner.
            </summary>
        </member>
        <member name="P:Xbim.Script.Scanner.yyleng">
            <summary>
            The length of the pattern in codepoints (not the same as 
            string-length if the pattern contains any surrogate pairs).
            </summary>
        </member>
        <member name="T:Xbim.Script.StringBuffer">
            <summary>
            This class reads characters from a single string as
            required, for example, by Visual Studio language services
            </summary>
        </member>
        <member name="M:Xbim.Script.BuildBuffer.Mark">
            <summary>
            Marks a conservative lower bound for the buffer,
            allowing space to be reclaimed.  If an application 
            needs to call GetString at arbitrary past locations 
            in the input stream, Mark() is not called.
            </summary>
        </member>
        <member name="M:Xbim.Script.BuildBuffer.Read">
            <summary>
            Read returns the ordinal number of the next char, or 
            EOF (-1) for an end of stream.  Note that the next
            code point may require *two* calls of Read().
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xbim.Script.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xbim.Script.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xbim.Script.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xbim.Script.Properties.Resources.Empty_template">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.#ctor(Xbim.IO.XbimModel)">
            <summary>
            Constructor which takes a existing model as an argument. 
            You can also close and open any model from the script.
            </summary>
            <param name="model">Model which shuldbe used for the script execution</param>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.#ctor">
            <summary>
            Parameterless constructor of the class. 
            Default empty model is created which can be used 
            or you can open other model from the script.
            </summary>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.SetSource(System.String)">
            <summary>
            Set source for scanning and parsing
            </summary>
            <param name="source">source to be used</param>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.SetSource(System.IO.Stream)">
            <summary>
            Set source for scanning and parsing
            </summary>
            <param name="source">source to be used</param>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.SetSource(System.Collections.Generic.IList{System.String})">
            <summary>
            Set source for scanning and parsing
            </summary>
            <param name="source">source to be used</param>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.ScanOnly">
            <summary>
            Performs only scan of the source and returns list of string 
            representation of Tokens. This is mainly for debugging.
            </summary>
            <returns>List of string representation of tokens</returns>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.Parse">
            <summary>
            The main function used to perform parsing of the query. 
            Returns false only if something serious happen during
            parsing process. However it is quite possible that some errors occured. 
            So, make sure to check Errors if there are any.
            </summary>
            <returns>False if parsing failed, true otherwise.</returns>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.Parse(System.String)">
            <summary>
            The main function used to perform parsing of the query. 
            Returns false only if something serious happen during
            parsing process. However it is quite possible that some errors occured. 
            So, make sure to check Errors if there are any.
            </summary>
            <returns>False if parsing failed, true otherwise.</returns>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.Parse(System.IO.Stream)">
            <summary>
            The main function used to perform parsing of the query. 
            Returns false only if something serious happen during
            parsing process. However it is quite possible that some errors occured. 
            So, make sure to check Errors if there are any.
            </summary>
            <returns>False if parsing failed, true otherwise.</returns>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.Parse(System.Collections.Generic.IList{System.String})">
            <summary>
            The main function used to perform parsing of the query. 
            Returns false only if something serious happen during
            parsing process. However it is quite possible that some errors occured. 
            So, make sure to check Errors if there are any.
            </summary>
            <returns>False if parsing failed, true otherwise.</returns>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.ResetSource">
            <summary>
            Source is available untill new source is defined. 
            So it is possible to perform scanning or parsing with the 
            source many times. Be carefull as side effects like data 
            creation will be persisted over the repeated execution.
            </summary>
        </member>
        <member name="M:Xbim.Script.XbimQueryParser.ClearSources">
            <summary>
            Helper function to clear sources available before new one is set.
            </summary>
        </member>
        <member name="P:Xbim.Script.XbimQueryParser.Errors">
            <summary>
            Errors encountered during parsing.
            </summary>
        </member>
        <member name="P:Xbim.Script.XbimQueryParser.ErrorLocations">
            <summary>
            Locations of the errors. ErrorLocation contains error message and
            location in a structure usable for text selection and other reporting.
            </summary>
        </member>
        <member name="P:Xbim.Script.XbimQueryParser.RuleChecks">
            <summary>
            Results of rule checks from the session (lifespan 
            of the parser or after last call to 'Clean results;')
            </summary>
        </member>
        <member name="P:Xbim.Script.XbimQueryParser.Output">
            <summary>
            Messages go to the Console command line normally but 
            you can use this property to define optional output 
            where messages should go. 
            </summary>
        </member>
        <member name="P:Xbim.Script.XbimQueryParser.Model">
            <summary>
            Model on which the parser operates
            </summary>
        </member>
        <member name="P:Xbim.Script.XbimQueryParser.Results">
            <summary>
            Variables which are result of the parsing process. 
            It can be either list of selected objects or new objects assigned to the variables.
            </summary>
        </member>
        <member name="E:Xbim.Script.XbimQueryParser.OnModelChanged">
            <summary>
            Event fired when model changes (closed or open)
            </summary>
        </member>
        <member name="E:Xbim.Script.XbimQueryParser.OnScriptParsed">
            <summary>
            Event is fired when script is parsed
            </summary>
        </member>
        <member name="E:Xbim.Script.XbimQueryParser.OnFileReportCreated">
            <summary>
            This event is fired when file with report is created 
            (like XLS or CSV as an export of properties and arguments 
            or result of rule checking)
            </summary>
        </member>
    </members>
</doc>
